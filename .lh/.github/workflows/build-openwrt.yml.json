{
    "sourceFile": ".github/workflows/build-openwrt.yml",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1673841443035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1673841936423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,15 @@\n # Description: Build OpenWrt using GitHub Actions\r\n #\r\n \r\n name: Build OpenWrt AX6S\r\n-\r\n+# 触发工作流程的事件\r\n+# on:\r\n+#   push:\r\n+#     branches:\r\n+#       - main\r\n+#       - \"releases/**\"\r\n+#       - dev\r\n on:\r\n   repository_dispatch:\r\n   workflow_dispatch:\r\n     inputs:\r\n"
                }
            ],
            "date": 1673841443035,
            "name": "Commit-0",
            "content": "#\r\n# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>\r\n#\r\n# This is free software, licensed under the MIT License.\r\n# See /LICENSE for more information.\r\n#\r\n# https://github.com/P3TERX/Actions-OpenWrt\r\n# Description: Build OpenWrt using GitHub Actions\r\n#\r\n\r\nname: Build OpenWrt AX6S\r\n\r\non:\r\n  repository_dispatch:\r\n  workflow_dispatch:\r\n    inputs:\r\n      # ssh:\r\n      #   description: 'SSH connection to Actions'\r\n      #   required: false\r\n      #   default: 'false'\r\n      record:\r\n        description: '输入版本描述'     \r\n        required: false\r\n        default: '升级内容：内核升级，更新应用版本'\r\n        type: string\r\n      release:\r\n        description: '上传到release'\r\n        required: false\r\n        default: true\r\n        type: boolean\r\n\r\nenv:\r\n  REPO_URL: https://github.com/coolsnowwolf/lede\r\n  REPO_BRANCH: master\r\n  FEEDS_CONF: feeds.conf.default\r\n  CONFIG_FILE: AX6S.config\r\n  DIY_P1_SH: diy-part1.sh\r\n  DIY_P2_SH: diy-part2.sh\r\n  UPLOAD_BIN_DIR: false\r\n  UPLOAD_FIRMWARE: true\r\n  UPLOAD_COWTRANSFER: false\r\n  UPLOAD_WETRANSFER: false\r\n  Remove_Old_RELEASE: true\r\n  TZ: Asia/Shanghai\r\n\r\njobs:\r\n  build:\r\n    runs-on: ubuntu-20.04\r\n\r\n    steps:\r\n    - name: Checkout\r\n      uses: actions/checkout@main\r\n\r\n    - name: Initialization environment\r\n      env:\r\n        DEBIAN_FRONTEND: noninteractive\r\n      run: |\r\n        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc\r\n        sudo -E apt-get -qq update\r\n        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-2004)\r\n        sudo -E apt-get -qq autoremove --purge\r\n        sudo -E apt-get -qq clean\r\n        sudo timedatectl set-timezone \"$TZ\"\r\n        sudo mkdir -p /workdir\r\n        sudo chown $USER:$GROUPS /workdir\r\n\r\n    - name: Clone source code\r\n      working-directory: /workdir\r\n      run: |\r\n        df -hT $PWD\r\n        git clone $REPO_URL -b $REPO_BRANCH openwrt\r\n        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt\r\n\r\n    - name: Load custom feeds\r\n      run: |\r\n        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default\r\n        chmod +x $DIY_P1_SH\r\n        cd openwrt\r\n        $GITHUB_WORKSPACE/$DIY_P1_SH\r\n\r\n    - name: Update feeds\r\n      run: cd openwrt && ./scripts/feeds update -a\r\n\r\n    - name: Install feeds\r\n      run: cd openwrt && ./scripts/feeds install -a\r\n\r\n    - name: Load custom configuration\r\n      run: |\r\n        [ -e files ] && mv files openwrt/files\r\n        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config\r\n        chmod +x $DIY_P2_SH\r\n        cd openwrt\r\n        $GITHUB_WORKSPACE/$DIY_P2_SH\r\n\r\n    # - name: SSH connection to Actions\r\n    #   uses: P3TERX/ssh2actions@v1.0.0\r\n    #   if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')\r\n    #   env:\r\n    #     TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}\r\n    #     TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}\r\n\r\n    - name: Download package\r\n      id: package\r\n      run: |\r\n        cd openwrt\r\n        make defconfig\r\n        make download -j8\r\n        find dl -size -1024c -exec ls -l {} \\;\r\n        find dl -size -1024c -exec rm -f {} \\;\r\n\r\n    - name: Compile the firmware\r\n      id: compile\r\n      run: |\r\n        cd openwrt\r\n        echo -e \"$(nproc) thread compile\"\r\n        make -j$(nproc) || make -j1 || make -j1 V=s\r\n        echo \"::set-output name=status::success\"\r\n        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\\1/' > DEVICE_NAME\r\n        [ -s DEVICE_NAME ] && echo \"DEVICE_NAME=_$(cat DEVICE_NAME)\" >> $GITHUB_ENV\r\n        echo \"FILE_DATE=_$(date +\"%Y%m%d%H%M\")\" >> $GITHUB_ENV\r\n\r\n    - name: Check space usage\r\n      if: (!cancelled())\r\n      run: df -hT\r\n\r\n    - name: Upload bin directory\r\n      uses: actions/upload-artifact@main\r\n      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'\r\n      with:\r\n        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}\r\n        path: openwrt/bin\r\n\r\n    - name: Organize files\r\n      id: organize\r\n      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()\r\n      run: |\r\n        cd openwrt/bin/targets/*/*\r\n        rm -rf packages\r\n        echo \"FIRMWARE=$PWD\" >> $GITHUB_ENV\r\n        echo \"::set-output name=status::success\"\r\n\r\n    - name: Upload firmware directory\r\n      uses: actions/upload-artifact@main\r\n      if: steps.organize.outputs.status == 'success' && !cancelled()\r\n      with:\r\n        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}\r\n        path: ${{ env.FIRMWARE }}\r\n\r\n    # - name: Upload firmware to cowtransfer\r\n    #   id: cowtransfer\r\n    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()\r\n    #   run: |\r\n    #     curl -fsSL git.io/file-transfer | sh\r\n    #     ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log\r\n    #     echo \"::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)\"\r\n    #     echo \"::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d\" \")\"\r\n\r\n    # - name: Upload firmware to WeTransfer\r\n    #   id: wetransfer\r\n    #   if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()\r\n    #   run: |\r\n    #     curl -fsSL git.io/file-transfer | sh\r\n    #     ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log\r\n    #     echo \"::warning file=wetransfer.com::$(cat wetransfer.log | grep https)\"\r\n    #     echo \"::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d\" \")\"\r\n\r\n    - name: Generate release tag\r\n      id: tag\r\n      if: inputs.release == 'true' && !cancelled()\r\n      run: |\r\n        echo \"::set-output name=release_tag::$(date +\"%Y.%m.%d-%H%M\")\"\r\n        touch release.txt\r\n        echo \"${{ inputs.record }}\" >> release.txt\r\n        echo \"::set-output name=status::success\"\r\n\r\n    - name: Upload firmware to release\r\n      uses: softprops/action-gh-release@v1\r\n      if: steps.tag.outputs.status == 'success' && !cancelled()\r\n      env:\r\n        GITHUB_TOKEN: ${{ secrets.RELEASE_FIRMWARE }}\r\n      with:\r\n        tag_name: ${{ steps.tag.outputs.release_tag }}\r\n        body_path: release.txt\r\n        files: ${{ env.FIRMWARE }}/*\r\n\r\n    - name: Delete workflow runs\r\n      uses: GitRML/delete-workflow-runs@main\r\n      with:\r\n        retain_days: 1\r\n        keep_minimum_runs: 5\r\n\r\n    - name: Remove old Releases\r\n      uses: dev-drprasad/delete-older-releases@v0.1.0\r\n      if: env.Remove_Old_RELEASE == 'true' && !cancelled()\r\n      with:\r\n        keep_latest: 5\r\n        delete_tags: true\r\n      env:\r\n        GITHUB_TOKEN: ${{ secrets.RELEASE_FIRMWARE }}\r\n"
        }
    ]
}